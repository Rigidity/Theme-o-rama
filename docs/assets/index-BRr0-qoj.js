import{i as a,R as p}from"./core-DdI4Y3zP.js";var f;(function(n){n[n.Audio=1]="Audio",n[n.Cache=2]="Cache",n[n.Config=3]="Config",n[n.Data=4]="Data",n[n.LocalData=5]="LocalData",n[n.Document=6]="Document",n[n.Download=7]="Download",n[n.Picture=8]="Picture",n[n.Public=9]="Public",n[n.Video=10]="Video",n[n.Resource=11]="Resource",n[n.Temp=12]="Temp",n[n.AppConfig=13]="AppConfig",n[n.AppData=14]="AppData",n[n.AppLocalData=15]="AppLocalData",n[n.AppCache=16]="AppCache",n[n.AppLog=17]="AppLog",n[n.Desktop=18]="Desktop",n[n.Executable=19]="Executable",n[n.Font=20]="Font",n[n.Home=21]="Home",n[n.Runtime=22]="Runtime",n[n.Template=23]="Template"})(f||(f={}));var o;(function(n){n[n.Start=0]="Start",n[n.Current=1]="Current",n[n.End=2]="End"})(o||(o={}));function s(n){return{isFile:n.isFile,isDirectory:n.isDirectory,isSymlink:n.isSymlink,size:n.size,mtime:n.mtime!==null?new Date(n.mtime):null,atime:n.atime!==null?new Date(n.atime):null,birthtime:n.birthtime!==null?new Date(n.birthtime):null,readonly:n.readonly,fileAttributes:n.fileAttributes,dev:n.dev,ino:n.ino,mode:n.mode,nlink:n.nlink,uid:n.uid,gid:n.gid,rdev:n.rdev,blksize:n.blksize,blocks:n.blocks}}function m(n){const t=new Uint8ClampedArray(n),i=t.byteLength;let l=0;for(let e=0;e<i;e++){const u=t[e];l*=256,l+=u}return l}class w extends p{async read(t){if(t.byteLength===0)return 0;const i=await a("plugin:fs|read",{rid:this.rid,len:t.byteLength}),l=m(i.slice(-8)),e=i instanceof ArrayBuffer?new Uint8Array(i):i;return t.set(e.slice(0,e.length-8)),l===0?null:l}async seek(t,i){return await a("plugin:fs|seek",{rid:this.rid,offset:t,whence:i})}async stat(){const t=await a("plugin:fs|fstat",{rid:this.rid});return s(t)}async truncate(t){await a("plugin:fs|ftruncate",{rid:this.rid,len:t})}async write(t){return await a("plugin:fs|write",{rid:this.rid,data:t})}}async function g(n,t){if(n instanceof URL&&n.protocol!=="file:")throw new TypeError("Must be a file URL.");const i=await a("plugin:fs|open",{path:n instanceof URL?n.toString():n,options:t});return new w(i)}async function c(n,t,i){if(n instanceof URL&&n.protocol!=="file:")throw new TypeError("Must be a file URL.");if(t instanceof ReadableStream){const l=await g(n,{read:!1,create:!0,write:!0,...i}),e=t.getReader();try{for(;;){const{done:u,value:d}=await e.read();if(u)break;await l.write(d)}}finally{e.releaseLock(),await l.close()}}else await a("plugin:fs|write_file",t,{headers:{path:encodeURIComponent(n instanceof URL?n.toString():n),options:JSON.stringify(i)}})}export{f as BaseDirectory,w as FileHandle,o as SeekMode,g as open,c as writeFile};
